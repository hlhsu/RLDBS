
# -*- coding: utf-8 -*-
"""Baseline_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ldOwVn0vFi0400h3ViGI-oQnl8SKR_yN
"""

import gym
import gym_oscillator


from stable_baselines3.common.utils import set_random_seed


from stable_baselines3.common.env_util import make_vec_env
import random
import numpy as np
from matplotlib import pyplot as plt
import time

from stable_baselines3.common.noise import NormalActionNoise, OrnsteinUhlenbeckActionNoise#, AdaptiveParamNoiseSpec
from stable_baselines3 import PPO
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('--algo', type = str, default = 'PPO')
parser.add_argument('--core', type = int, default = 7) # only PPO is supported with multiple cores
parser.add_argument('--seed', type = int, default = 0)
parser.add_argument('--model_folder', type = str, default = 'trained_models')
parser.add_argument('--exp_name', type = str, default = '_exp_1000_pytorch_test') # ppo: '_exp_1000_pytorch_v2'
parser.add_argument('--time_steps', type = int, default = 1e7) # 5000000 #1e7
args = parser.parse_args()



exp_dir = './'+args.model_folder + '/test' + args.algo + args.exp_name + str(args.seed)



from platform import python_version
  
  
print("Current Python Version-", python_version())

if __name__ == '__main__':


    env_id = 'oscillator-v0'
    time_steps = args.time_steps # 10e7 #5000000
    num_cpu = args.core
    seed = args.seed


    set_random_seed(seed)
    np.random.seed(seed)
 
    random.seed(seed)


    
    start = time.time()



    import torch
    env = gym.make(env_id)
   
    print('start to train')
    
    clip = 0.2
    env =  make_vec_env(env_id, n_envs=num_cpu, seed = seed)
    print('num cpu: ', num_cpu)
    model = PPO("MlpPolicy", env, gamma= 0.99,  n_steps=128, ent_coef=0.01, learning_rate=2.5e-4, vf_coef=0.5,
                max_grad_norm=0.5, gae_lambda=0.95, verbose=1, clip_range=clip, tensorboard_log="MLP/")
    model.learn(time_steps)
    model.save(exp_dir)




    end = time.time()

    print('training time: ', end - start)
    print('finish training')

   
   





    
